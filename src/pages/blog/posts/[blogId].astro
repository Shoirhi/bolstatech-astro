---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getBlogList, getBlogDetail } from "@/libs/microcms";
import Breadcrumb from "@/components/Breadcrumb.astro";
import { formatDate, adjustImageSizeAndFormat, extractToc } from "@/libs/utils";
import { seoConfig } from "@/constants";
import { Image } from "astro:assets";

const { blogId } = Astro.params;

export async function getStaticPaths() {
  const response = await getBlogList({ fields: ["id"] });
  return response.contents.map((content: any) => ({
    params: {
      blogId: content.id,
    },
  }));
}

const blog = await getBlogDetail(blogId as string);

blog.content = adjustImageSizeAndFormat(blog.content);
const toc = extractToc(blog.content);
---

<BaseLayout
  title={blog.title}
  description={blog.description}
  imageUrl={blog.thumbnail ? blog.thumbnail.url : undefined}
  type="article"
  structuredData={{
    type: "Article",
    option: {
      datePublished: blog.publishedAt || null,
      dateModified: blog.updatedAt || null,
      author: [
        {
          "@type": "Person",
          name: "Hiroshi Kamikawa",
          url: "https://twitter.com/shoirhi",
        },
      ],
      publisher: {
        name: seoConfig.siteName,
        url: Astro.site,
      },
    },
  }}
>
  <div class="container py-16">
    <Breadcrumb
      lists={[
        {
          name: "ブログ一覧",
          path: "/blog/p/1",
        },
        {
          name: blog.title,
        },
      ]}
    />
    <div class="relative grid grid-cols-3 gap-x-4">
      <article class="js-toc-content col-span-3 mx-auto prose md:col-span-2">
        <h1>{blog.title}</h1>
        <p>公開日時：{formatDate(blog.publishedAt || blog.createdAt)}</p>
        {
          blog.thumbnail && (
            <Image
              src={blog.thumbnail.url}
              width="560"
              height="560"
              loading="eager"
              alt=""
            />
          )
        }
        <div set:html={blog.content} />
      </article>
      <aside class="hidden prose md:block">
        <!-- <ul class="sticky top-24">
          {
            toc.map((data) => (
              <li>
                <a href={`#${data.id}`}>{data.text}</a>
              </li>
            ))
          }
        </ul> -->
        <div class="js-toc sticky top-24"></div>
      </aside>
    </div>
  </div>

  <script
    is:inline
    src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.18.2/tocbot.min.js"
  ></script>

  <script is:inline>
    tocbot.init({
      tocSelector: ".js-toc",
      contentSelector: ".js-toc-content",
      headingSelector: "h2, h3, h4, h5",
      hasInnerContainers: true,
      scrollSmoothDuration: 300,
      headingsOffset: 96,
      scrollSmoothOffset: -96,
    });
  </script>
</BaseLayout>
